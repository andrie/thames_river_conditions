---
# title: "River conditions"
# date: now
# date-format: "YYYY-MM-DD HH:mm:ssZ"
toc: false
echo: false
jupyter: python3
reference-location: margin
format: 
    html:
        theme: lumen
        font-size: 0.8em
---


```{python}
def get_simple_dat():

    df = hcc.scrape_conditions()
    dat = df[df["From"].isin(["Sunbury Lock", "Molesey Lock"])]
    dat = dat.drop('Local', axis = 1)

    # add Locks column with value Walton if the From column is Sunbury Lock
    dat["Locks"] = dat["From"].apply(lambda x: "Shepperton to Molesey" if x == "Sunbury Lock" else "Molesey to Teddington")
    dat["Location"] = ["Walton", "Kingston"]
    dat = dat.loc[:, ["Location", "Locks", "Current conditions"]]



    cond = dat["Current conditions"].values
    boards = []
    for i, val in enumerate(cond):
        match = re.search("^(Yellow.*)$", val)
        if match:
            boards.append("yellow")
        else:
            match = re.search("^(Red.*)$", val)
            if match:
                boards.append("red")
            else: 
                boards.append("")

    dat['Boards'] = boards

    # compute today - 7 days
    today = datetime.now()
    seven = today - timedelta(days = 7)
    seven = seven.date()

    # extract the date from the seven days ago datetime object
    walton   = hcc.get_thames_metric("Walton",   parameter = "flow", since = seven).loc[:, ["dateTime", "value"]]
    kingston = hcc.get_thames_metric("Kingston", parameter = "flow", since = seven).loc[:, ["dateTime", "value"]]

    # print(f"walton: {len(walton)}")
    # print(f"kingston: {len(kingston)}")

    # combine walton and kingston into rows of a pandas dataframe
    flow = [walton.iloc[0]["value"], kingston.iloc[0]["value"]]
    flow = [round(x, 0) if x is not None else None for x in flow]

    # extract date from dateTime column of walton, where dataTime is a string
    def make_sparkline(x):
        x = x.dropna(subset=['value'])
        if len(x) == 0:
            return ['Not available']
        x["date"] = x["dateTime"].str.extract(r"(\d{4}-\d{2}-\d{2})")
        s = x.groupby("date")[['value']].mean().reset_index()
        return sparklines(s["value"].values)

    sw = make_sparkline(walton)
    sk = make_sparkline(kingston)

    history = [sw, sk]

    trend = [item for sublist in history for item in sublist]

    # bind trend and flow to dat
    dat["Latest flow (cumecs)"] = flow
    dat["Trend (7 days)"] = trend

    now = datetime.now()
    now = now.strftime("%Y-%m-%d %H:%M:%S")
    updated = "Last updated at " + now
    dat = dat.reset_index(drop = True)
    
    return [dat, updated]
```

```{python}
def simple_dat_gt(dat, updated):
    import great_tables as gt
    reds = dat.index[dat["Boards"] == "red"].tolist()
    # print(reds)
    # print(len(reds))
    yellows = dat.index[dat["Boards"] == "yellow"].tolist()
    # print("yellows")
    # print(yellows)
    # print(len(yellows))
    z = (gt.GT(dat)
        .tab_style(
            style=[style.fill(color="#e21637"), style.text(color="white")],
            locations=loc.body(columns="Current conditions", rows=reds)
        )
        .tab_style(
            style=style.fill(color="#ffcd5e"),
            locations=loc.body(columns="Current conditions", rows=yellows)
        )
        .fmt_integer(columns="Latest flow (cumecs)")
        .tab_header(
            title = "Local river conditions"
        )
        .tab_source_note(
            source_note = updated
        )
    )
    return z
```


```{python}
#| echo: false

import hcc

from great_tables import style, loc
import re
import pandas as pd
from sparklines import sparklines
# import datetime
from datetime import datetime, timedelta



```

```{python}
dat, updated = get_simple_dat()
# print(dat)
simple_dat_gt(dat, updated)
```


