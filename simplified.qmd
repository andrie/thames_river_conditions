---
title: "River conditions"
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
toc: false
echo: false
jupyter: python3
reference-location: margin
format: 
    html:
        theme: lumen
        font-size: 0.8em
---

```{python}
#| echo: false

import hcc
df = hcc.scrape_conditions()

```


```{python}
import great_tables as gt
from great_tables import style, loc
import re
dat = df[df["From"].isin(["Sunbury Lock", "Molesey Lock"])]
dat = dat.drop('Local', axis = 1)

# add Locks column with value Walton if the From column is Sunbury Lock
dat["Locks"] = dat["From"].apply(lambda x: "Shepperton to Molesey" if x == "Sunbury Lock" else "Molesey to Teddington")
dat["Location"] = ["Walton", "Kingston"]
dat = dat.loc[:, ["Location", "Locks", "Current conditions"]]



cond = dat["Current conditions"].values

reds = []
for i, val in enumerate(cond):
    match = re.search("^(Red.*)$", val)
    if match:
        reds.append(i)

yellows = []
for i, val in enumerate(cond):
    match = re.search("^(Yellow.*)$", val)
    if match:
        yellows.append(i)

```


```{python}
# hcc.plot_thames_level("Walton", parameter = "flow")


import hcc
from importlib import reload
reload(hcc)

# compute today - 7 days
from datetime import datetime, timedelta
today = datetime.now()
seven = today - timedelta(days = 7)
seven = seven.date()

# extract the date from the seven days ago datetime object


walton   = hcc.get_rates("Walton",   parameter = "flow", since = seven).loc[:, ["dateTime", "value"]]
kingston = hcc.get_rates("Kingston", parameter = "flow", since = seven).loc[:, ["dateTime", "value"]]


import pandas as pd

# combine walton and kingston into rows of a pandas dataframe
stations = ["Walton", "Kingston"]
flow = [walton.iloc[0]["value"], kingston.iloc[0]["value"]]
flow = [round(x, 0) for x in flow]

# truncate flow to integer
# flow = [str(x) for x in flow]


```

```{python}
from sparklines import sparklines

# extract date from dateTime column of walton, where dataTime is a string
def make_sparkline(x):
    x["date"] = x["dateTime"].str.extract(r"(\d{4}-\d{2}-\d{2})")
    # s = x.groupby("date").mean(skipna = True).reset_index()

    s = x.groupby("date")[['value']].mean()
    return sparklines(s["value"].values)

history = [
    make_sparkline(walton),
    make_sparkline(kingston)
]

trend = [item for sublist in history for item in sublist]


# bind trend and flow to dat
dat["Latest flow (cumecs)"] = flow
dat["Trend"] = trend
(
    gt.GT(dat)
    .tab_style(
        style=[style.fill(color="#E21637"), style.text(color="white")],
        locations=loc.body(columns="Current conditions", rows=reds)
    )
    .tab_style(
        style=style.fill(color="#FFCD5E"),
        locations=loc.body(columns="Current conditions", rows=yellows)
    )
    .fmt_integer(columns="Latest flow (cumecs)")
)
```
